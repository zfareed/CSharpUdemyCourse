
                               CSharp Intermediate Course

//////////////////////// Section 1 (About this course) /////////////////////////////////////////

// 1, 2, 3, 4, 5, 6  Introduction of the course

    >> Classes
    >> Interfaces
    >> OOP



//////////////////////////  Section 2 (Classes) ///////////////////////////////////////////////

// 7. Introduction to Classes

    >> Classes
      > contains Fields and Methods
    >> Objects
      > Ther are instance of a class


// 8. Constructor

    >> A constructor is a method of a class that is called when an object is created.
    >> It defines the initial state of an object


// 9. Object Initilizer

    >> Object Initilzer is simply a syntax to initilize an object without calling one
       of its constructors.

    >> var person = new Person
                            {
                               firstName = "Zain";
                               lastName = "Fareed";
                            }


// 10. Methods

     >> completed


// 11. Fields

     >> completed


// 12. Access Modifiers

     A way to control access to a class or its members
     >> Private
     >> Public
     >> Protected
     >> Internal 
     >> Protected Internal

     >> Encapsulation
        > Define fields as private
        > Provide getter/setter methods as public


// 13. Properties

     A class member that encapsulates a getter/setter for accessing a field.


// 14. Indexers

    A way to access elements in the class that represents a list of values.


// 15. Summary

     >> Completed



///////////////////// Section 3 (Association between Classes) /////////////////////////////


17. Class Coupling

     A measure of how classes and subsystems are.
     >> Tight Coupling
     >> Loose Coupling


18. Inheritance

    >> A kind of relationship between two classes that allows one
       to inherit code with other.
    >> Benfits :
       > code reuse
       > polymorphic behaviour



19. Composition

     >> A kind of relationship between two classes that allows one
       to inherit code with other.(same as Inheritence)
    >> Benfits :
       > code reuse
       > Flexiblity
       > A means to loose coupling


// 20.  Favour Composition over Inheritance 

       >> completed


// 21. Summary

       >> Completed



////////////////// Inheritance (Second Pillar of OOP)   ///////////////////////////////


// 22. Access Modefiers

       >> Private
       >> Public
       >> Protected (A protected member is accessible within its class and by derived class instances.)
       >> Internal (Internal types or members are accessible only within files in the same assembly)
       >> Protected Internal (Accessible from same assembly and derived classes)


// 23. Constructors and Inheritance

       >> Base Class Constructors always exectued first.
       >> Base Class Constructors are not inheritied.


// 24. Upcasting and DownCasting

       >> Conversion from deriverd class to base class (Upcasting)
       >> Conversion from base class to derived class (Downcasting)
       >> use of 'as' and 'is' keywords


// 25. Boxing and Unboxing

      Types in C#
      >> Value Types     (int, bool, string, float etc.) (use stack)
      >> Reference Types (array, list, object) (use heap)

      >> object class is the base of all classes in .NET Framework.

      Boxing
      >> The conversion of value type instance to object type reference.

      Unboxing
      >> The conversion of object type reference to value type.



// 26. Summary

      >> completed



/////////////////// Section 5 (Polymorphism : Third Pillar of OOP) //////////////////////////////





   
    